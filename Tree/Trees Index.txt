Tree Traversals - T1
C program to Calculate Size of a tree - T2
C Code to Determine if Two Trees are Identical - T3
C Program to Find the Maximum Depth or Height of a Tree - T4
C program to Delete a Tree - T5
Efficient C Function to Convert a Binary Tree into its Mirror Tree - T6
Given a binary tree, print out all of its root-to-leaf paths one per line - T7
Lowest Common Ancestor in a Binary Search Tree - T8
Find the node with minimum value in a Binary Search Tree - T9
Level Order Tree Traversal - T10
Program to count leaf nodes in a binary tree - T11
A program to check if a binary tree is BST or not - T12
Level order traversal in spiral form - T13
Check for Children Sum Property in a Binary Tree - T14
Convert an arbitrary Binary Tree to a tree that holds Children Sum Property - T15
Diameter of a Binary Tree - T16
Determine if a binary tree is height-balanced - T17
Inorder Tree Traversal without Recursion using stack - T18
Inorder Tree Traversal without recursion and without stack - T19
Root to leaf path sum equal to a given number - T20
Maximum width of a binary tree - T21
Print nodes at k distance from root - T22
Get Level of a node in a Binary Tree - T23
Print Ancestors of a given node in Binary Tree - T24
Print BST keys in the given range - T25
Check if a binary tree is subtree of another binary tree - T26
Connect nodes at same level using constant extra space - T27
Sorted Array to Balanced BST - T28
Populate Inorder Successor for all nodes - T29
Merge Two Balanced Binary Search Trees - T30
Convert tree to BST - T31
Construct Special Binary Tree from given Inorder traversal - T32
Construct a special tree from given preorder traversal - T33
Check if each internal node of a BST has exactly one child - T34
Check whether a given Binary Tree is Complete or not - T35
Two nodes of a BST are swapped, correct the BST - T36
Construct Full Binary Tree from given preorder and postorder traversals - T37
Construct BST from given preorder traversal - T38
Iterative Preorder Traversal - T39
Linked complete binary tree & its creation - T40



Total number of possible Binary Search Trees with n nodes = Catalan number Cn = (2n)!/(n+1)!*n!