<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0088)http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/ -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <meta name="verify-v1" content="Qq4cneB3rmao09eEEtLOJX2rw+5ZMdf8/CiGxO9IulU=">
        <meta name="y_key" content="79a87047956c2ff1">       
    
    <meta name="generator" content="WordPress 3.4">

        <title>Greedy Algorithms | Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks | GeeksforGeeks</title>
   
       <style type="text/css" media="screen">
          @import url('http://www.geeksforgeeks.org/wp-content/themes/GfGTheme/style.css');
    </style>
    <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://www.geeksforgeeks.org/feed/rss/">
    <link rel="alternate" type="application/rss+xml" title="RSS 0.92" href="http://www.geeksforgeeks.org/feed/">
    <link rel="alternate" type="application/rss+xml" title="Atom" href="http://www.geeksforgeeks.org/feed/atom/">
    <link rel="alternate" type="application/rss+xml" title="RSS 2.0 comments feed" href="http://www.geeksforgeeks.org/comments/feed/">   
    <link rel="pingback" href="http://www.geeksforgeeks.org/xmlrpc.php">
    <link href="http://www.geeksforgeeks.org/wp-content/themes/minimoo/favicon.ico" rel="shortcut icon">      
     <script id="LR1" type="text/javascript" async="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/client.js"></script><script id="facebook-jssdk" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/all.js"></script><script id="twitter-wjs" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/widgets.js"></script><script type="text/javascript" async="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/plusone.js" gapi_processed="true"></script><script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/cb=gapi.loaded_0" async=""></script><script type="text/javascript" async="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/ga.js"></script><script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/mootools_core.js" type="text/javascript"></script>
     <script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/mootools_more.js" type="text/javascript"></script>
   
    <script type="text/javascript">
        //if (document.images) {
        //    var preload_image = new Image(32,32);
        //    preload_image.src = "http://www.geeksforgeeks.org/wp-content/themes/minimoo/js/ajax-loader.gif";
        //}   
       
        var comments_per_page = 50;
        var comment_order = 'desc';
        var default_comments_page = 'newest';
    </script>
   
     <script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/main.js" type="text/javascript"></script>
   
       
    	 <!--[if lte IE 8]>
<div id="fb-root" style="width: 90;"></div> 
 
<!--<![endif]-->

<!-- This site is optimized with the Yoast WordPress SEO plugin v1.3.4.4 - http://yoast.com/wordpress/seo/ -->
<link rel="canonical" href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks.htm">
<meta property="og:locale" content="en_US">
<meta property="og:title" content="Greedy Algorithms | Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks">
<meta property="og:url" content="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/">
<meta property="og:site_name" content="GeeksforGeeks">
<meta property="og:type" content="article">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/Fig-0-300x139.jpg">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/Fig-1.jpg">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/Fig-2-241x300.jpg">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/Fig-3-300x232.jpg">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/Fig-4-300x175.jpg">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/Fig-5-300x175.jpg">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/Fig-6-300x175.jpg">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/Fig-7-300x175.jpg">
<meta property="og:image" content="http://www.geeksforgeeks.org/wp-content/uploads/fig8new.jpeg">
<!-- / Yoast WordPress SEO plugin. -->


			<script type="text/javascript">//<![CDATA[
			// Google Analytics for WordPress by Yoast v4.2.8 | http://yoast.com/wordpress/google-analytics/
			var _gaq = _gaq || [];
			_gaq.push(['_setAccount', 'UA-12148232-1']);
							_gaq.push(['_trackPageview']);
			(function () {
				var ga = document.createElement('script');
				ga.type = 'text/javascript';
				ga.async = true;
				ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
				var s = document.getElementsByTagName('script')[0];
				s.parentNode.insertBefore(ga, s);
			})();
			//]]></script>
			<link rel="alternate" type="application/rss+xml" title="GeeksforGeeks » Greedy Algorithms | Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) Comments Feed" href="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/feed/">
<link rel="stylesheet" id="bbp-default-bbpress-css" href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/bbpress.css" type="text/css" media="screen">
<link rel="stylesheet" id="jamie_social-css" href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/social.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-pagenavi-css" href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/pagenavi-css.css" type="text/css" media="all">
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/comment-reply.js"></script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/jquery.min.js"></script>
<script type="text/javascript">try{jQuery.noConflict();}catch(e){};</script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/all(1).js"></script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/googletracking.js"></script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/head_twitterlinkedin.js"></script><script type="text/javascript" async="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/widgets.js"></script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/wp-quicklatex-frontend.js"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.geeksforgeeks.org/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.geeksforgeeks.org/wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress 3.4">
<link rel="shortlink" href="http://www.geeksforgeeks.org/?p=26604">

<!-- Bad Behavior 2.2.13 run time: 2.663 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1359775887 122.172.13.12';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		
		<script type="text/javascript">
			/* <![CDATA[ */
			var ajaxurl = 'http://www.geeksforgeeks.org/wp-admin/admin-ajax.php';

						/* ]]> */
		</script>

	<meta property="fb:app_id" content="308017392649785">
<meta property="fb:admins" content="100002858089465,678632134">
<link rel="stylesheet" type="text/css" href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/recaptcha.css">	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
<link rel="stylesheet" type="text/css" href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/shCore.css"><link rel="stylesheet" type="text/css" href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/shThemeDefault.css"><meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.3">
   
<script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/nonSecureAnonymousFramework"></script><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}
.fb_invisible{display:none}
.fb_reset{background:none;border-spacing:0;border:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}
.fb_link img{border:none}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}
.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}
.fb_dialog_content{background:#fff;color:#333}
.fb_dialog_close_icon{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yA/x/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/y6/x/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px;top:8px\9;right:7px\9}
.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}
.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}
.fb_dialog_close_icon:hover{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yA/x/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/y6/x/s816eWC-2sl.gif)}
.fb_dialog_close_icon:active{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yA/x/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/y6/x/s816eWC-2sl.gif)}
.fb_dialog_loader{background-color:#f2f2f2;border:1px solid #606060;font-size:24px;padding:20px}
.fb_dialog_top_left,
.fb_dialog_top_right,
.fb_dialog_bottom_left,
.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}
/* @noflip */
.fb_dialog_top_left{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yR/x/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}
/* @noflip */
.fb_dialog_top_right{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yR/x/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}
/* @noflip */
.fb_dialog_bottom_left{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yR/x/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}
/* @noflip */
.fb_dialog_bottom_right{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yR/x/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}
.fb_dialog_vert_left,
.fb_dialog_vert_right,
.fb_dialog_horiz_top,
.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}
.fb_dialog_vert_left,
.fb_dialog_vert_right{width:10px;height:100%}
.fb_dialog_vert_left{margin-left:-10px}
.fb_dialog_vert_right{right:0;margin-right:-10px}
.fb_dialog_horiz_top,
.fb_dialog_horiz_bottom{width:100%;height:10px}
.fb_dialog_horiz_top{margin-top:-10px}
.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}
.fb_dialog_iframe{line-height:0}
.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #3b5998;color:#fff;font-size:14px;font-weight:bold;margin:0}
.fb_dialog_content .dialog_title > span{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yD/x/Cou7n-nqK52.gif)
no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}
body.fb_hidden{-webkit-transform:none;height:100%;margin:0;left:-10000px;overflow:visible;position:absolute;top:-10000px;width:100%
}
.fb_dialog.fb_dialog_mobile.loading{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yc/x/3rhSv5V8j3o.gif)
white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}
.fb_dialog.fb_dialog_mobile.loading.centered{max-height:590px;min-height:590px;max-width:500px;min-width:500px}
#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;left:0;top:0;width:100%;min-height:100%;z-index:10000}
#fb-root #fb_dialog_ipad_overlay.hidden{display:none}
.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}
.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0 0, 0 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}
.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%
}
.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px
}
.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px
}
.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0 0, 0 100%, from(#4966A6),
color-stop(0.5, #355492), to(#2A4887));border:1px solid #29447e;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset,
rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}
.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}
.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}
.fb_dialog_content .dialog_content{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yJ/x/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}
.fb_dialog_content .dialog_footer{background:#f2f2f2;border:1px solid #555;border-top-color:#ccc;height:40px}
#fb_dialog_loader_close{float:left}
.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}
.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}
.fb_iframe_widget{position:relative;display:-moz-inline-block;display:inline-block}
.fb_iframe_widget iframe{position:absolute}
.fb_iframe_widget_lift{z-index:1}
.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify;vertical-align:text-bottom}
.fb_hide_iframes iframe{position:relative;left:-10000px}
.fb_iframe_widget_loader{position:relative;display:inline-block}
.fb_iframe_widget_fluid{display:inline}
.fb_iframe_widget_fluid span{width:100%}
.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}
.fb_iframe_widget_loader .FB_Loader{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yJ/x/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}
.fb_button_simple,
.fb_button_simple_rtl{background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yH/x/eIpbnVKI9lR.png);background-repeat:no-repeat;cursor:pointer;outline:none;text-decoration:none}
.fb_button_simple_rtl{background-position:right 0}
.fb_button_simple .fb_button_text{margin:0 0 0 20px;padding-bottom:1px}
.fb_button_simple_rtl .fb_button_text{margin:0 10px 0 0}
a.fb_button_simple:hover .fb_button_text,
a.fb_button_simple_rtl:hover .fb_button_text,
.fb_button_simple:hover .fb_button_text,
.fb_button_simple_rtl:hover .fb_button_text{text-decoration:underline}
.fb_button,
.fb_button_rtl{background:#29447e url(http://static.ak.fbcdn.net/rsrc.php/v2/yl/x/FGFbc80dUKj.png);background-repeat:no-repeat;cursor:pointer;display:inline-block;padding:0 0 0 1px;text-decoration:none;outline:none}
.fb_button .fb_button_text,
.fb_button_rtl .fb_button_text{background:#5f78ab url(http://static.ak.fbcdn.net/rsrc.php/v2/yl/x/FGFbc80dUKj.png);border-top:solid 1px #879ac0;border-bottom:solid 1px #1a356e;color:#fff;display:block;font-family:"lucida grande",tahoma,verdana,arial,sans-serif;font-weight:bold;padding:2px 6px 3px 6px;margin:1px 1px 0 21px;text-shadow:none}
a.fb_button,
a.fb_button_rtl,
.fb_button,
.fb_button_rtl{text-decoration:none}
a.fb_button:active .fb_button_text,
a.fb_button_rtl:active .fb_button_text,
.fb_button:active .fb_button_text,
.fb_button_rtl:active .fb_button_text{border-bottom:solid 1px #29447e;border-top:solid 1px #45619d;background:#4f6aa3;text-shadow:none}
.fb_button_xlarge,
.fb_button_xlarge_rtl{background-position:left -60px;font-size:24px;line-height:30px}
.fb_button_xlarge .fb_button_text{padding:3px 8px 3px 12px;margin-left:38px}
a.fb_button_xlarge:active{background-position:left -99px}
.fb_button_xlarge_rtl{background-position:right -268px}
.fb_button_xlarge_rtl .fb_button_text{padding:3px 8px 3px 12px;margin-right:39px}
a.fb_button_xlarge_rtl:active{background-position:right -307px}
.fb_button_large,
.fb_button_large_rtl{background-position:left -138px;font-size:13px;line-height:16px}
.fb_button_large .fb_button_text{margin-left:24px;padding:2px 6px 4px 6px}
a.fb_button_large:active{background-position:left -163px}
.fb_button_large_rtl{background-position:right -346px}
.fb_button_large_rtl .fb_button_text{margin-right:25px}
a.fb_button_large_rtl:active{background-position:right -371px}
.fb_button_medium,
.fb_button_medium_rtl{background-position:left -188px;font-size:11px;line-height:14px}
a.fb_button_medium:active{background-position:left -210px}
.fb_button_medium_rtl{background-position:right -396px}
.fb_button_text_rtl,
.fb_button_medium_rtl .fb_button_text{padding:2px 6px 3px 6px;margin-right:22px}
a.fb_button_medium_rtl:active{background-position:right -418px}
.fb_button_small,
.fb_button_small_rtl{background-position:left -232px;font-size:10px;line-height:10px}
.fb_button_small .fb_button_text{padding:2px 6px 3px;margin-left:17px}
a.fb_button_small:active,
.fb_button_small:active{background-position:left -250px}
.fb_button_small_rtl{background-position:right -440px}
.fb_button_small_rtl .fb_button_text{padding:2px 6px;margin-right:18px}
a.fb_button_small_rtl:active{background-position:right -458px}
.fb_share_count_wrapper{position:relative;float:left}
.fb_share_count{background:#b0b9ec none repeat scroll 0 0;color:#333;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;text-align:center}
.fb_share_count_inner{background:#e8ebf2;display:block}
.fb_share_count_right{margin-left:-1px;display:inline-block}
.fb_share_count_right .fb_share_count_inner{border-top:solid 1px #e8ebf2;border-bottom:solid 1px #b0b9ec;margin:1px 1px 0 1px;font-size:10px;line-height:10px;padding:2px 6px 3px;font-weight:bold}
.fb_share_count_top{display:block;letter-spacing:-1px;line-height:34px;margin-bottom:7px;font-size:22px;border:solid 1px #b0b9ec}
.fb_share_count_nub_top{border:none;display:block;position:absolute;left:7px;top:35px;margin:0;padding:0;width:6px;height:7px;background-repeat:no-repeat;background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yP/x/bSOHtKbCGYI.png)}
.fb_share_count_nub_right{border:none;display:inline-block;padding:0;width:5px;height:10px;background-repeat:no-repeat;background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yL/x/i_oIVTKMYsL.png);vertical-align:top;background-position:right 5px;z-index:10;left:2px;margin:0 2px 0 0;position:relative}
.fb_share_no_count{display:none}
.fb_share_size_Small .fb_share_count_right .fb_share_count_inner{font-size:10px}
.fb_share_size_Medium .fb_share_count_right .fb_share_count_inner{font-size:11px;padding:2px 6px 3px;letter-spacing:-1px;line-height:14px}
.fb_share_size_Large .fb_share_count_right .fb_share_count_inner{font-size:13px;line-height:16px;padding:2px 6px 4px;font-weight:normal;letter-spacing:-1px}
.fb_share_count_hidden .fb_share_count_nub_top,
.fb_share_count_hidden .fb_share_count_top,
.fb_share_count_hidden .fb_share_count_nub_right,
.fb_share_count_hidden .fb_share_count_right{visibility:hidden}
.fb_connect_bar_container div,
.fb_connect_bar_container span,
.fb_connect_bar_container a,
.fb_connect_bar_container img,
.fb_connect_bar_container strong{background:none;border-spacing:0;border:0;direction:ltr;font-style:normal;font-variant:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal;vertical-align:baseline}
.fb_connect_bar_container{position:fixed;left:0 !important;right:0 !important;height:42px !important;padding:0 25px !important;margin:0 !important;vertical-align:middle !important;border-bottom:1px solid #333 !important;background:#3b5998 !important;z-index:99999999 !important;overflow:hidden !important}
.fb_connect_bar_container_ie6{position:absolute;top:expression(document.compatMode=="CSS1Compat"? document.documentElement.scrollTop+"px":body.scrollTop+"px")}
.fb_connect_bar{position:relative;margin:auto;height:100%;width:100%;padding:6px 0 0 0 !important;background:none;color:#fff !important;font-family:"lucida grande", tahoma, verdana, arial, sans-serif !important;font-size:13px !important;font-style:normal !important;font-variant:normal !important;font-weight:normal !important;letter-spacing:normal !important;line-height:1 !important;text-decoration:none !important;text-indent:0 !important;text-shadow:none !important;text-transform:none !important;white-space:normal !important;word-spacing:normal !important}
.fb_connect_bar a:hover{color:#fff}
.fb_connect_bar .fb_profile img{height:30px;width:30px;vertical-align:middle;margin:0 6px 5px 0}
.fb_connect_bar div a,
.fb_connect_bar span,
.fb_connect_bar span a{color:#bac6da;font-size:11px;text-decoration:none}
.fb_connect_bar .fb_buttons{float:right;margin-top:7px}
.fb_edge_widget_with_comment{position:relative;*z-index:1000}
.fb_edge_widget_with_comment span.fb_edge_comment_widget{position:absolute}
.fb_edge_widget_with_comment span.fb_send_button_form_widget{z-index:1}
.fb_edge_widget_with_comment span.fb_send_button_form_widget .FB_Loader{left:0;top:1px;margin-top:6px;margin-left:0;background-position:50% 50%;background-color:#fff;height:150px;width:394px;border:1px #666 solid;border-bottom:2px solid #283e6c;z-index:1}
.fb_edge_widget_with_comment span.fb_send_button_form_widget.dark .FB_Loader{background-color:#000;border-bottom:2px solid #ccc}
.fb_edge_widget_with_comment span.fb_send_button_form_widget.siderender
.FB_Loader{margin-top:0}
.fbpluginrecommendationsbarleft,
.fbpluginrecommendationsbarright{position:fixed !important;bottom:0;z-index:999}
/* @noflip */
.fbpluginrecommendationsbarleft{left:10px}
/* @noflip */
.fbpluginrecommendationsbarright{right:10px}</style><style type="text/css">* html #li_ui_li_gen_1360257136574_0 a#li_ui_li_gen_1360257136574_0-link{height:1% !important;}#li_ui_li_gen_1360257136574_0{position:relative !important;overflow:visible !important;display:block !important;}#li_ui_li_gen_1360257136574_0 a#li_ui_li_gen_1360257136574_0-link{border:0 !important;height:20px !important;text-decoration:none !important;padding:0 !important;margin:0 !important;display:inline-block !important;}#li_ui_li_gen_1360257136574_0 a#li_ui_li_gen_1360257136574_0-link:link, #li_ui_li_gen_1360257136574_0 a#li_ui_li_gen_1360257136574_0-link:visited, #li_ui_li_gen_1360257136574_0 a#li_ui_li_gen_1360257136574_0-link:hover, #li_ui_li_gen_1360257136574_0 a#li_ui_li_gen_1360257136574_0-link:active{border:0 !important;text-decoration:none !important;}#li_ui_li_gen_1360257136574_0 a#li_ui_li_gen_1360257136574_0-link:after{content:"." !important;display:block !important;clear:both !important;visibility:hidden !important;line-height:0 !important;height:0 !important;}#li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-logo{background:url(http://static.licdn.com/scds/common/u/img/sprite/sprite_connect_v13.png) 0px -276px no-repeat !important;cursor:pointer !important;border:0 !important;text-indent:-9999em !important;overflow:hidden !important;padding:0 !important;margin:0 !important;position:absolute !important;left:0px !important;top:0px !important;display:block !important;width:20px !important;height:20px !important;float:right !important;}#li_ui_li_gen_1360257136574_0.hovered #li_ui_li_gen_1360257136574_0-logo{background-position:-20px -276px !important;}#li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-logo, #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-logo{background-position:-40px -276px !important;}.IN-shadowed #li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-logo{}#li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title{color:#333 !important;cursor:pointer !important;display:block !important;white-space:nowrap !important;float:left !important;margin-left:1px !important;vertical-align:top !important;overflow:hidden !important;text-align:center !important;height:18px !important;padding:0 4px 0 23px !important;border:1px solid #000 !important;border-top-color:#E2E2E2 !important;border-right-color:#BFBFBF !important;border-bottom-color:#B9B9B9 !important;border-left-color:#E2E2E2 !important;border-left:0 !important;text-shadow:#FFFFFF -1px 1px 0 !important;line-height:20px !important;border-radius:0 !important;-webkit-border-radius:0 !important;border-top-right-radius:2px !important;border-bottom-right-radius:2px !important;-webkit-border-top-right-radius:2px !important;-webkit-border-bottom-right-radius:2px !important;background-color:#ECECEC !important;background-image:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#FEFEFE), color-stop(100%,#ECECEC)) !important; background-image: -webkit-linear-gradient(top, #FEFEFE 0%, #ECECEC 100%) !important;}#li_ui_li_gen_1360257136574_0.hovered #li_ui_li_gen_1360257136574_0-title{border:1px solid #000 !important;border-top-color:#ABABAB !important;border-right-color:#9A9A9A !important;border-bottom-color:#787878 !important;border-left-color:#04568B !important;border-left:0 !important;background-color:#EDEDED !important;background-image:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#EDEDED), color-stop(100%,#DEDEDE)) !important; background-image: -webkit-linear-gradient(top, #EDEDED 0%, #DEDEDE 100%) !important;}#li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-title, #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-title{color:#666 !important;border:1px solid #000 !important;border-top-color:#B6B6B6 !important;border-right-color:#B3B3B3 !important;border-bottom-color:#9D9D9D !important;border-left-color:#49627B !important;border-left:0 !important;background-color:#DEDEDE !important;background-image:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#E3E3E3), color-stop(100%,#EDEDED)) !important; background-image: -webkit-linear-gradient(top, #E3E3E3 0%, #EDEDED 100%) !important;}.IN-shadowed #li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title{}.IN-shadowed #li_ui_li_gen_1360257136574_0.hovered #li_ui_li_gen_1360257136574_0-title{}.IN-shadowed #li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-title, .IN-shadowed #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-title{}#li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title-text, #li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title-text *{color:#333 !important;font-size:11px !important;font-family:Arial, sans-serif !important;font-weight:bold !important;font-style:normal !important;display:inline-block !important;background:transparent none !important;vertical-align:baseline !important;height:18px !important;line-height:20px !important;float:none !important;}#li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title-text strong{font-weight:bold !important;}#li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title-text em{font-style:italic !important;}#li_ui_li_gen_1360257136574_0.hovered #li_ui_li_gen_1360257136574_0-title-text, #li_ui_li_gen_1360257136574_0.hovered #li_ui_li_gen_1360257136574_0-title-text *{color:#000 !important;}#li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-title-text, #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-title-text, #li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-title-text *, #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-title-text *{color:#666 !important;}#li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title #li_ui_li_gen_1360257136574_0-mark{display:inline-block !important;width:0px !important;overflow:hidden !important;}.success #li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title{color:#333 !important;border-top-color:#E2E2E2 !important;border-right-color:#BFBFBF !important;border-bottom-color:#B9B9B9 !important;border-left-color:#E2E2E2 !important;background-color:#ECECEC !important;background-image:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#FEFEFE), color-stop(100%,#ECECEC)) !important; background-image: -webkit-linear-gradient(top, #FEFEFE 0%, #ECECEC 100%) !important;}.success #li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title-text, .success #li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title-text *{color:#333 !important;}.IN-shadowed .success #li_ui_li_gen_1360257136574_0 #li_ui_li_gen_1360257136574_0-title{}.success #li_ui_li_gen_1360257136574_0.hovered #li_ui_li_gen_1360257136574_0-title{color:#000 !important;border-top-color:#ABABAB !important;border-right-color:#9A9A9A !important;border-bottom-color:#787878 !important;border-left-color:#04568B !important;background-color:#EDEDED !important;background-image:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#EDEDED), color-stop(100%,#DEDEDE)) !important; background-image: -webkit-linear-gradient(top, #EDEDED 0%, #DEDEDE 100%) !important;}.success #li_ui_li_gen_1360257136574_0.hovered #li_ui_li_gen_1360257136574_0-title-text, .success #li_ui_li_gen_1360257136574_0.hovered #li_ui_li_gen_1360257136574_0-title-text *{color:#000 !important;}.success #li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-title, .success #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-title{color:#666 !important;border-top-color:#B6B6B6 !important;border-right-color:#B3B3B3 !important;border-bottom-color:#9D9D9D !important;border-left-color:#49627B !important;background-color:#DEDEDE !important;background-image:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#E3E3E3), color-stop(100%,#EDEDED)) !important; background-image: -webkit-linear-gradient(top, #E3E3E3 0%, #EDEDED 100%) !important;}.success #li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-title-text, .success #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-title-text, .success #li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-title-text *, .success #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-title-text *{color:#666 !important;}.IN-shadowed .success #li_ui_li_gen_1360257136574_0.clicked #li_ui_li_gen_1360257136574_0-title, .IN-shadowed .success #li_ui_li_gen_1360257136574_0.down #li_ui_li_gen_1360257136574_0-title{}#li_ui_li_gen_1360257136591_1-container.IN-right {display:inline-block !important;float:left !important;overflow:visible !important;position:relative !important;height:18px !important;padding-left:2px !important;line-height:1px !important;cursor:pointer !important;}#li_ui_li_gen_1360257136591_1.IN-right {display:block !important;float:left !important;height:18px !important;margin-right:4px !important;padding-right:4px !important;background:url(http://static.licdn.com/scds/common/u/img/sprite/sprite_connect_v13.png) right -100px no-repeat !important;}#li_ui_li_gen_1360257136591_1-inner.IN-right {display:block !important;float:left !important;padding-left:8px !important;text-align:center !important;background:url(http://static.licdn.com/scds/common/u/img/sprite/sprite_connect_v13.png) 0px -60px no-repeat !important;}#li_ui_li_gen_1360257136591_1-content.IN-right {display:inline !important;font-size:11px !important;color:#04558B !important;font-weight:bold !important;font-family:Arial, sans-serif !important;line-height:18px !important;padding:0 5px 0 5px !important;}#li_ui_li_gen_1360257136591_1-container.IN-hovered #li_ui_li_gen_1360257136591_1.IN-right, #li_ui_li_gen_1360257136591_1-container.IN-clicked #li_ui_li_gen_1360257136591_1.IN-right, #li_ui_li_gen_1360257136591_1-container.IN-down #li_ui_li_gen_1360257136591_1.IN-right {background-position-y:-120px !important;}#li_ui_li_gen_1360257136591_1-container.IN-hovered #li_ui_li_gen_1360257136591_1-inner.IN-right, #li_ui_li_gen_1360257136591_1-container.IN-clicked #li_ui_li_gen_1360257136591_1-inner.IN-right, #li_ui_li_gen_1360257136591_1-container.IN-down #li_ui_li_gen_1360257136591_1-inner.IN-right {background-position-y:-80px !important;}#li_ui_li_gen_1360257136591_1-container.IN-empty {display:none !important;}#li_ui_li_gen_1360257136591_1-container.IN-hidden #li_ui_li_gen_1360257136591_1 {display:none !important;}</style><script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/saved_resource"></script><style type="text/css">.gssb_c{border:0;position:absolute;z-index:989}.gssb_e{border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);cursor:default}.gssb_f{visibility:hidden;white-space:nowrap}.gssb_k{border:0;display:block;position:absolute;top:0;z-index:988}.gsdd_a{border:none!important}.gsib_a{width:100%;padding:4px 6px 0}.gsib_a,.gsib_b{vertical-align:top}.gssb_a{padding:0 7px}.gssb_a,.gssb_a td{white-space:nowrap;overflow:hidden;line-height:22px}#gssb_b{font-size:11px;color:#36c;text-decoration:none}#gssb_b:hover{font-size:11px;color:#36c;text-decoration:underline}.gssb_g{text-align:center;padding:8px 0 7px;position:relative}.gssb_h{font-size:15px;height:28px;margin:0.2em;-webkit-appearance:button}.gssb_i{background:#eee}.gss_ifl{visibility:hidden;padding-left:5px}.gssb_i .gss_ifl{visibility:visible}a.gssb_j{font-size:13px;color:#36c;text-decoration:none;line-height:100%}a.gssb_j:hover{text-decoration:underline}.gssb_l{height:1px;background-color:#e5e5e5}.gssb_m{color:#000;background:#fff}.gsq_a{padding:0}.gscsep_a{display:none}.gsfe_a{border:1px solid #b9b9b9;border-top-color:#a0a0a0;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);}.gsfe_b{border:1px solid #4d90fe;outline:none;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);}.gscb_a{display:inline-block;font:27px/13px arial,sans-serif}.gsst_a .gscb_a{color:#a1b9ed;cursor:pointer}.gsst_a:hover .gscb_a,.gsst_a:focus .gscb_a{color:#36c}.gsst_a{display:inline-block}.gsst_a{cursor:pointer;padding:0 4px}.gsst_a:hover{text-decoration:none!important}.gsst_b{font-size:16px;padding:0 2px;user-select:none;-webkit-user-select:none;white-space:nowrap}.gsst_e{opacity:0.55;}.gsst_a:hover .gsst_e,.gsst_a:focus .gsst_e{opacity:0.72;}.gsst_a:active .gsst_e{opacity:1;}.gsst_f{background:white;text-align:left}.gsst_g{background-color:white;border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-webkit-box-shadow:0 2px 4px rgba(0,0,0,0.2);margin:-1px -3px;padding:0 6px}.gsst_h{background-color:white;height:1px;margin-bottom:-1px;position:relative;top:-1px}.gssb_a{padding:0 7px}.gssb_e{border:0}.gssb_l{margin:5px 0}.gssb_c .gsc-completion-container{position:static}.gssb_c{z-index:5000}.gsc-completion-container table{background:transparent;font-size:inherit;font-family:inherit}.gssb_c > tbody > tr,.gssb_c > tbody > tr > td,.gssb_d,.gssb_d > tbody > tr,.gssb_d > tbody > tr > td,.gssb_e,.gssb_e > tbody > tr,.gssb_e > tbody > tr > td{padding:0;margin:0;border:0}.gssb_a table,.gssb_a table tr,.gssb_a table tr td{padding:0;margin:0;border:0}</style><script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/search.I.js"></script></head>

<body data-twttr-rendered="true"><iframe id="twttrHubFrameSecure" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" name="twttrHubFrameSecure" style="position: absolute; top: -9999em; width: 10px; height: 10px;" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/hub(1).htm"></iframe><iframe id="twttrHubFrame" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" name="twttrHubFrame" style="position: absolute; top: -9999em; width: 10px; height: 10px;" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/hub.htm"></iframe>
<!-- o4dI0sCXUgoSONabbd8mbZ4SA3E -->    
    <div id="wrapper">
        <div class="blog-info">
                <h1 class="blog-title">
                <a href="http://www.geeksforgeeks.org/" title="GeeksforGeeks">GeeksforGeeks</a>
            </h1>
       
            <div class="blog-description">
                A computer science portal for geeks            </div>
        </div>
        <b><p> <br><br> <a rel="nofollow" href="http://www.geeksforgeeks.org/wp-login.php">Log in</a></p></b>  
           <div class="clear"></div>         
              
                     
            <div id="menu">   
                 <ul>
                   <li><a href="http://www.geeksforgeeks.org/">
                              Home</a></li>
                               <li><a href="http://www.geeksforgeeks.org/forums/">Q&amp;A</a></li>
                               <li><a href="http://www.geeksforgeeks.org/forums/forum/interview-questions/">Interview Corner</a></li>
                               <li><a href="http://www.geeksforgeeks.org/contribute/ask-a-question/">Ask a question</a></li>   
            </ul>

            <ul>
                <li class="page_item page-item-9830"><a href="http://www.geeksforgeeks.org/contribute/">Contribute</a></li>
<li class="page_item page-item-21638"><a href="http://www.geeksforgeeks.org/gate-corner/">GATE</a></li>
<li class="page_item page-item-24811"><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/">Algorithms</a></li>
<li class="page_item page-item-24966"><a href="http://www.geeksforgeeks.org/c/">C</a></li>
<li class="page_item page-item-25749"><a href="http://www.geeksforgeeks.org/c-plus-plus/">C++</a></li>
<li class="page_item page-item-26089"><a href="http://www.geeksforgeeks.org/books/">Books</a></li>
<li class="page_item page-item-2"><a href="http://www.geeksforgeeks.org/about/">About us</a></li>
                             </ul> 
                     
            <div class="rssfeed">
                <!--<a href="http://feeds.feedburner.com/limetouch" title="Subscribe to LimeTouch RSS Feed"><strong>Subscribe</strong></a>-->
                <!--<<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to GeeksforGeeks RSS Feed"><strong>Subscribe</strong></a>-->            
            </div>    
               
            <div class="clear"></div>     
        </div>
        <div id="navmenu">
				<ul id="menu" style="padding:0; margin:0;">
						<li class="cat-item cat-item-3"><a href="http://www.geeksforgeeks.org/category/c-arrays" title="Questions regarding Arrays">Arrays</a>
</li>	

	<li class="cat-item cat-item-17"><a href="http://www.geeksforgeeks.org/category/bit-magic" title="View all posts filed under Bit Magic">Bit Magic</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.geeksforgeeks.org/category/c-puzzles" title="View all posts filed under C/C++ Puzzles">C/C++ Puzzles</a>
</li>

<li class="cat-item cat-item-18"><a href="http://www.geeksforgeeks.org/category/articles" title="View all posts filed under Articles">Articles</a>
</li>

	<li class="cat-item cat-item-67"><a href="http://www.geeksforgeeks.org/category/gfact" title="View all posts filed under GFacts">GFacts</a>
</li>
	<li class="cat-item cat-item-8"><a href="http://www.geeksforgeeks.org/category/linked-list" title="Linked List problems">Linked Lists</a>
</li>
	<li class="cat-item cat-item-66"><a href="http://www.geeksforgeeks.org/category/multiple-choice-question" title="View all posts filed under MCQ">MCQ</a>

</li>
	<li class="cat-item cat-item-4"><a href="http://www.geeksforgeeks.org/category/c-programs" title="Miscellaneous">Misc</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://www.geeksforgeeks.org/category/program-output" title="View all posts filed under Output">Output</a>
</li>
	<li class="cat-item cat-item-7"><a href="http://www.geeksforgeeks.org/category/c-strings" title="Questions related to strings">Strings</a>
</li>
	<li class="cat-item cat-item-19"><a href="http://www.geeksforgeeks.org/category/tree" title="View all posts filed under Trees">Trees</a>
</li>
</ul>
        </div>

        <div id="content">	   	
	
	
	<div class="post" id="post">
	
		
			
				
			<div class="post-main" id="post-26604">
		
				<div class="post-info">			
					<div class="post-title-info">
						<h2 class="post-title">Greedy Algorithms | Set 2 (Kruskal’s Minimum Spanning Tree Algorithm)</h2>
					</div>
					
					<div class="post-date">October 30, 2012</div>
					<div class="clear"></div>
				</div>
				  
				<div class="post-content" id="post-content">
					<p><em>What is Minimum Spanning Tree?</em><br>
Given a connected and undirected graph, a <em>spanning tree</em> of that graph is a subgraph that is a tree and connects all the vertices together. <span id="more-26604"></span>A single graph can have many different spanning trees. <!--more-->A <em>minimum spanning tree (MST)</em> or minimum weight spanning tree for a weighted, connected and undirected graph is a spanning tree with weight less than or equal to the weight of every other spanning tree. The weight of a spanning tree is the sum of weights given to each edge of the spanning tree.</p>
<p><em>How many edges does a minimum spanning tree has?</em><br>
A minimum spanning tree has (V – 1) edges where V is the number of vertices in the given  graph. </p>
<p><em>What are the applications of Minimum Spanning Tree?</em><br>
See <a href="http://www.geeksforgeeks.org/archives/11110">this </a>for applications of MST.</p>
<p>Below are the steps for finding MST using Kruskal’s algorithm</p>
<pre><strong>1.</strong> Sort all the edges in non-decreasing order of their weight.

<strong>2.</strong> Pick the smallest edge. Check if it forms a cycle with the spanning tree 
formed so far. If cycle is not formed, include this edge. Else, discard it.  

<strong>3.</strong> Repeat step#2 until there are (V-1) edges in the spanning tree.
</pre>
<p>The step#2 uses <a href="http://www.geeksforgeeks.org/archives/26350">Union-Find algorithm</a> to detect cycle. So we recommend to read following post as a prerequisite.<br>
<a href="http://www.geeksforgeeks.org/archives/26350">Union-Find Algorithm | Set 1 (Detect Cycle in a Graph)</a><br>
<a href="http://www.geeksforgeeks.org/archives/26489">Union-Find Algorithm | Set 2 (Union By Rank and Path Compression)</a></p>
<p>The algorithm is a Greedy Algorithm. The Greedy Choice is to pick the smallest weight edge that does not cause a cycle in the MST constructed so far. Let us understand it with an example: Consider the below input graph. </p>
<p><a href="http://www.geeksforgeeks.org/wp-content/uploads/Fig-0.jpg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-0-300x139.jpg" alt="" title="Fig 0" width="300" height="139" class="aligncenter size-medium wp-image-26641"></a></p>
<p>The graph contains 9 vertices and 14 edges. So, the minimum spanning tree formed will be having (9 – 1) = 8 edges. </p>
<pre>After sorting:
Weight   Src    Dest
1         7      6
2         8      2
2         6      5
4         0      1
4         2      5
6         8      6
7         2      3
7         7      8
8         0      7
8         1      2
9         3      4
10        5      4
11        1      7
14        3      5</pre>
<p>Now pick all edges one by one from sorted list of edges<br>
<strong>1.</strong> <em>Pick edge 7-6:</em> No cycle is formed, include it.<br>
<a href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-1.jpg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-1.jpg" alt="" title="Fig 1" width="100" height="30" class="aligncenter size-full wp-image-26642"></a></p>
<p><strong>2.</strong> <em>Pick edge 8-2:</em> No cycle is formed, include it.<br>
<a href="http://www.geeksforgeeks.org/wp-content/uploads/Fig-2.jpg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-2-241x300.jpg" alt="" title="Fig 2" width="90" height="125" class="aligncenter size-medium wp-image-26643"></a></p>
<p><strong>3.</strong> <em>Pick edge 6-5:</em> No cycle is formed, include it.<br>
<a href="http://www.geeksforgeeks.org/wp-content/uploads/Fig-3.jpg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-3-300x232.jpg" alt="" title="Fig 3" width="145" height="125" class="aligncenter size-medium wp-image-26644"></a></p>
<p><strong>4.</strong> <em>Pick edge 0-1:</em> No cycle is formed, include it.<br>
<a href="http://www.geeksforgeeks.org/wp-content/uploads/Fig-4.jpg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-4-300x175.jpg" alt="" title="Fig 4" width="210" height="125" class="aligncenter size-medium wp-image-26645"></a></p>
<p><strong>5.</strong> <em>Pick edge 2-5:</em> No cycle is formed, include it.<br>
<a href="http://www.geeksforgeeks.org/wp-content/uploads/Fig-5.jpg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-5-300x175.jpg" alt="" title="Fig 5" width="210" height="125" class="aligncenter size-medium wp-image-26646"></a></p>
<p><strong>6.</strong><em> Pick edge 8-6: </em>Since including this edge results in cycle, discard it.</p>
<p><strong>7.</strong> <em>Pick edge 2-3:</em> No cycle is formed, include it.<br>
<a href="http://www.geeksforgeeks.org/wp-content/uploads/Fig-6.jpg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-6-300x175.jpg" alt="" title="Fig 6" width="210" height="125" class="aligncenter size-medium wp-image-26647"></a></p>
<p><strong>8.</strong> <em>Pick edge 7-8:</em> Since including this edge results in cycle, discard it.</p>
<p><strong>9.</strong> <em>Pick edge 0-7:</em> No cycle is formed, include it.<br>
<a href="http://www.geeksforgeeks.org/wp-content/uploads/Fig-7.jpg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/Fig-7-300x175.jpg" alt="" title="Fig 7" width="220" height="125" class="aligncenter size-medium wp-image-26648"></a></p>
<p><strong>10.</strong> <em>Pick edge 1-2: </em>Since including this edge results in cycle, discard it.</p>
<p><strong>11.</strong> <em>Pick edge 3-4:</em> No cycle is formed, include it.<br>
<a href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/fig8new.jpeg"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/fig8new.jpeg" alt="" title="Fig 8" width="270" height="125" class="aligncenter size-medium wp-image-26649"></a></p>
<p>Since the number of edges included equals (V – 1), the algorithm stops here.</p>
<div><div id="highlighter_24279" class="syntaxhighlighter nogutter  cpp"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="cpp comments">// Kruskal's algortihm to find Minimum Spanning Tree of a given connected,</code></div><div class="line number2 index1 alt1"><code class="cpp comments">// undirected and weighted graph</code></div><div class="line number3 index2 alt2"><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></div><div class="line number4 index3 alt1"><code class="cpp preprocessor">#include &lt;stdlib.h&gt;</code></div><div class="line number5 index4 alt2"><code class="cpp preprocessor">#include &lt;string.h&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="cpp comments">// a structure to represent a weighted edge in graph</code></div><div class="line number8 index7 alt1"><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge</code></div><div class="line number9 index8 alt2"><code class="cpp plain">{</code></div><div class="line number10 index9 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">src, dest, weight;</code></div><div class="line number11 index10 alt2"><code class="cpp plain">};</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="cpp comments">// a structure to represent a connected, undirected and weighted graph</code></div><div class="line number14 index13 alt1"><code class="cpp keyword bold">struct</code> <code class="cpp plain">Graph</code></div><div class="line number15 index14 alt2"><code class="cpp plain">{</code></div><div class="line number16 index15 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// V-&gt; Number of vertices, E-&gt; Number of edges</code></div><div class="line number17 index16 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">V, E;</code></div><div class="line number18 index17 alt1">&nbsp;</div><div class="line number19 index18 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// graph is represented as an array of edges. Since the graph is</code></div><div class="line number20 index19 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// undirected, the edge from src to dest is also edge from dest</code></div><div class="line number21 index20 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// to src. Both are counted as 1 edge here.</code></div><div class="line number22 index21 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge* edge;</code></div><div class="line number23 index22 alt2"><code class="cpp plain">};</code></div><div class="line number24 index23 alt1">&nbsp;</div><div class="line number25 index24 alt2"><code class="cpp comments">// Creates a graph with V vertices and E edges</code></div><div class="line number26 index25 alt1"><code class="cpp keyword bold">struct</code> <code class="cpp plain">Graph* createGraph(</code><code class="cpp color1 bold">int</code> <code class="cpp plain">V, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">E)</code></div><div class="line number27 index26 alt2"><code class="cpp plain">{</code></div><div class="line number28 index27 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Graph* graph = (</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Graph*) </code><code class="cpp functions bold">malloc</code><code class="cpp plain">( </code><code class="cpp keyword bold">sizeof</code><code class="cpp plain">(</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Graph) );</code></div><div class="line number29 index28 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;V = V;</code></div><div class="line number30 index29 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;E = E;</code></div><div class="line number31 index30 alt2">&nbsp;</div><div class="line number32 index31 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge = (</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge*) </code><code class="cpp functions bold">malloc</code><code class="cpp plain">( graph-&gt;E * </code><code class="cpp keyword bold">sizeof</code><code class="cpp plain">( </code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge ) );</code></div><div class="line number33 index32 alt2">&nbsp;</div><div class="line number34 index33 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">graph;</code></div><div class="line number35 index34 alt2"><code class="cpp plain">}</code></div><div class="line number36 index35 alt1">&nbsp;</div><div class="line number37 index36 alt2"><code class="cpp comments">// A structure to represent a subset for union-find</code></div><div class="line number38 index37 alt1"><code class="cpp keyword bold">struct</code> <code class="cpp plain">subset</code></div><div class="line number39 index38 alt2"><code class="cpp plain">{</code></div><div class="line number40 index39 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">parent;</code></div><div class="line number41 index40 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">rank;</code></div><div class="line number42 index41 alt1"><code class="cpp plain">};</code></div><div class="line number43 index42 alt2">&nbsp;</div><div class="line number44 index43 alt1"><code class="cpp comments">// A utility function to find set of an element i</code></div><div class="line number45 index44 alt2"><code class="cpp comments">// (uses path compression technique)</code></div><div class="line number46 index45 alt1"><code class="cpp color1 bold">int</code> <code class="cpp plain">find(</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">subset subsets[], </code><code class="cpp color1 bold">int</code> <code class="cpp plain">i)</code></div><div class="line number47 index46 alt2"><code class="cpp plain">{</code></div><div class="line number48 index47 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// find root and make root as parent of i (path compression)</code></div><div class="line number49 index48 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code> <code class="cpp plain">(subsets[i].parent != i)</code></div><div class="line number50 index49 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">subsets[i].parent = find(subsets, subsets[i].parent);</code></div><div class="line number51 index50 alt2">&nbsp;</div><div class="line number52 index51 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">subsets[i].parent;</code></div><div class="line number53 index52 alt2"><code class="cpp plain">}</code></div><div class="line number54 index53 alt1">&nbsp;</div><div class="line number55 index54 alt2"><code class="cpp comments">// A function that does union of two sets of x and y</code></div><div class="line number56 index55 alt1"><code class="cpp comments">// (uses union by rank)</code></div><div class="line number57 index56 alt2"><code class="cpp keyword bold">void</code> <code class="cpp plain">Union(</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">subset subsets[], </code><code class="cpp color1 bold">int</code> <code class="cpp plain">x, </code><code class="cpp color1 bold">int</code> <code class="cpp plain">y)</code></div><div class="line number58 index57 alt1"><code class="cpp plain">{</code></div><div class="line number59 index58 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">xroot = find(subsets, x);</code></div><div class="line number60 index59 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">yroot = find(subsets, y);</code></div><div class="line number61 index60 alt2">&nbsp;</div><div class="line number62 index61 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// Attach smaller rank tree under root of high rank tree</code></div><div class="line number63 index62 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// (Union by Rank)</code></div><div class="line number64 index63 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code> <code class="cpp plain">(subsets[xroot].rank &lt; subsets[yroot].rank)</code></div><div class="line number65 index64 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">subsets[xroot].parent = yroot;</code></div><div class="line number66 index65 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">else</code> <code class="cpp keyword bold">if</code> <code class="cpp plain">(subsets[xroot].rank &gt; subsets[yroot].rank)</code></div><div class="line number67 index66 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">subsets[yroot].parent = xroot;</code></div><div class="line number68 index67 alt1">&nbsp;</div><div class="line number69 index68 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// If ranks are same, then make one as root and increment</code></div><div class="line number70 index69 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// its rank by one</code></div><div class="line number71 index70 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">else</code></div><div class="line number72 index71 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number73 index72 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">subsets[yroot].parent = xroot;</code></div><div class="line number74 index73 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">subsets[xroot].rank++;</code></div><div class="line number75 index74 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number76 index75 alt1"><code class="cpp plain">}</code></div><div class="line number77 index76 alt2">&nbsp;</div><div class="line number78 index77 alt1"><code class="cpp comments">// Compare two edges according to their weights.</code></div><div class="line number79 index78 alt2"><code class="cpp comments">// Used in qsort() for sorting an array of edges</code></div><div class="line number80 index79 alt1"><code class="cpp color1 bold">int</code> <code class="cpp plain">myComp(</code><code class="cpp keyword bold">const</code> <code class="cpp keyword bold">void</code><code class="cpp plain">* a, </code><code class="cpp keyword bold">const</code> <code class="cpp keyword bold">void</code><code class="cpp plain">* b)</code></div><div class="line number81 index80 alt2"><code class="cpp plain">{</code></div><div class="line number82 index81 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge* a1 = (</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge*)a;</code></div><div class="line number83 index82 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge* b1 = (</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge*)b;</code></div><div class="line number84 index83 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">a1-&gt;weight &gt; b1-&gt;weight;</code></div><div class="line number85 index84 alt2"><code class="cpp plain">}</code></div><div class="line number86 index85 alt1">&nbsp;</div><div class="line number87 index86 alt2 highlighted"><code class="cpp comments">// The main function to construct MST using Kruskal's algorithm</code></div><div class="line number88 index87 alt1 highlighted"><code class="cpp keyword bold">void</code> <code class="cpp plain">KruskalMST(</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Graph* graph)</code></div><div class="line number89 index88 alt2 highlighted"><code class="cpp plain">{</code></div><div class="line number90 index89 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">V = graph-&gt;V;</code></div><div class="line number91 index90 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge result[V];&nbsp; </code><code class="cpp comments">// Tnis will store the resultant MST</code></div><div class="line number92 index91 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">e = 0;&nbsp; </code><code class="cpp comments">// An index variable, used for result[]</code></div><div class="line number93 index92 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">i = 0;&nbsp; </code><code class="cpp comments">// An index variable, used for sorted edges</code></div><div class="line number94 index93 alt1 highlighted">&nbsp;</div><div class="line number95 index94 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// Step 1:&nbsp; Sort all the edges in non-decreasing order of their weight</code></div><div class="line number96 index95 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// If we are not allowed to change the given graph, we can create a copy of</code></div><div class="line number97 index96 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// array of edges</code></div><div class="line number98 index97 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">qsort</code><code class="cpp plain">(graph-&gt;edge, graph-&gt;E, </code><code class="cpp keyword bold">sizeof</code><code class="cpp plain">(graph-&gt;edge[0]), myComp);</code></div><div class="line number99 index98 alt2 highlighted">&nbsp;</div><div class="line number100 index99 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// Allocate memory for creating V ssubsets</code></div><div class="line number101 index100 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">subset *subsets =</code></div><div class="line number102 index101 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">(</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">subset*) </code><code class="cpp functions bold">malloc</code><code class="cpp plain">( V * </code><code class="cpp keyword bold">sizeof</code><code class="cpp plain">(</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">subset) );</code></div><div class="line number103 index102 alt2 highlighted">&nbsp;</div><div class="line number104 index103 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// Create V subsets with single elements</code></div><div class="line number105 index104 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">for</code> <code class="cpp plain">(</code><code class="cpp color1 bold">int</code> <code class="cpp plain">v = 0; v &lt; V; ++v)</code></div><div class="line number106 index105 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number107 index106 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">subsets[v].parent = v;</code></div><div class="line number108 index107 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">subsets[v].rank = 0;</code></div><div class="line number109 index108 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number110 index109 alt1 highlighted">&nbsp;</div><div class="line number111 index110 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// Number of edges to be taken is equal to V-1</code></div><div class="line number112 index111 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">while</code> <code class="cpp plain">(e &lt; V - 1)</code></div><div class="line number113 index112 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number114 index113 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// Step 2: Pick the smallest edge. And increment the index</code></div><div class="line number115 index114 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// for next iteration</code></div><div class="line number116 index115 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Edge next_edge = graph-&gt;edge[i++];</code></div><div class="line number117 index116 alt2 highlighted">&nbsp;</div><div class="line number118 index117 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">x = find(subsets, next_edge.src);</code></div><div class="line number119 index118 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">y = find(subsets, next_edge.dest);</code></div><div class="line number120 index119 alt1 highlighted">&nbsp;</div><div class="line number121 index120 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// If including this edge does't cause cycle, include it</code></div><div class="line number122 index121 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// in result and increment the index of result for next edge</code></div><div class="line number123 index122 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">if</code> <code class="cpp plain">(x != y)</code></div><div class="line number124 index123 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">{</code></div><div class="line number125 index124 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">result[e++] = next_edge;</code></div><div class="line number126 index125 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">Union(subsets, x, y);</code></div><div class="line number127 index126 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number128 index127 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// Else discard the next_edge</code></div><div class="line number129 index128 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">}</code></div><div class="line number130 index129 alt1 highlighted">&nbsp;</div><div class="line number131 index130 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// print the contents of result[] to display the built MST</code></div><div class="line number132 index131 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"Following are the edges in the constructed MST\n"</code><code class="cpp plain">);</code></div><div class="line number133 index132 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">for</code> <code class="cpp plain">(i = 0; i &lt; e; ++i)</code></div><div class="line number134 index133 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"%d -- %d == %d\n"</code><code class="cpp plain">, result[i].src, result[i].dest,</code></div><div class="line number135 index134 alt2 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">result[i].weight);</code></div><div class="line number136 index135 alt1 highlighted"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code><code class="cpp plain">;</code></div><div class="line number137 index136 alt2 highlighted"><code class="cpp plain">}</code></div><div class="line number138 index137 alt1">&nbsp;</div><div class="line number139 index138 alt2"><code class="cpp comments">// Driver program to test above functions</code></div><div class="line number140 index139 alt1"><code class="cpp color1 bold">int</code> <code class="cpp plain">main()</code></div><div class="line number141 index140 alt2"><code class="cpp plain">{</code></div><div class="line number142 index141 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">/* Let us create following weighted graph</code></div><div class="line number143 index142 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">10</code></div><div class="line number144 index143 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">0--------1</code></div><div class="line number145 index144 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">|&nbsp; \&nbsp;&nbsp;&nbsp;&nbsp; |</code></div><div class="line number146 index145 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">6|&nbsp;&nbsp; 5\&nbsp;&nbsp; |15</code></div><div class="line number147 index146 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ |</code></div><div class="line number148 index147 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">2--------3</code></div><div class="line number149 index148 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */</code></div><div class="line number150 index149 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">V = 4;&nbsp; </code><code class="cpp comments">// Number of vertices in graph</code></div><div class="line number151 index150 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp color1 bold">int</code> <code class="cpp plain">E = 5;&nbsp; </code><code class="cpp comments">// Number of edges in graph</code></div><div class="line number152 index151 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">struct</code> <code class="cpp plain">Graph* graph = createGraph(V, E);</code></div><div class="line number153 index152 alt2">&nbsp;</div><div class="line number154 index153 alt1">&nbsp;</div><div class="line number155 index154 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// add edge 0-1</code></div><div class="line number156 index155 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[0].src = 0;</code></div><div class="line number157 index156 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[0].dest = 1;</code></div><div class="line number158 index157 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[0].weight = 10;</code></div><div class="line number159 index158 alt2">&nbsp;</div><div class="line number160 index159 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// add edge 0-2</code></div><div class="line number161 index160 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[1].src = 0;</code></div><div class="line number162 index161 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[1].dest = 2;</code></div><div class="line number163 index162 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[1].weight = 6;</code></div><div class="line number164 index163 alt1">&nbsp;</div><div class="line number165 index164 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// add edge 0-3</code></div><div class="line number166 index165 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[2].src = 0;</code></div><div class="line number167 index166 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[2].dest = 3;</code></div><div class="line number168 index167 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[2].weight = 5;</code></div><div class="line number169 index168 alt2">&nbsp;</div><div class="line number170 index169 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// add edge 1-3</code></div><div class="line number171 index170 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[3].src = 1;</code></div><div class="line number172 index171 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[3].dest = 3;</code></div><div class="line number173 index172 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[3].weight = 15;</code></div><div class="line number174 index173 alt1">&nbsp;</div><div class="line number175 index174 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp comments">// add edge 2-3</code></div><div class="line number176 index175 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[4].src = 2;</code></div><div class="line number177 index176 alt2"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[4].dest = 3;</code></div><div class="line number178 index177 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">graph-&gt;edge[4].weight = 4;</code></div><div class="line number179 index178 alt2">&nbsp;</div><div class="line number180 index179 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp plain">KruskalMST(graph);</code></div><div class="line number181 index180 alt2">&nbsp;</div><div class="line number182 index181 alt1"><code class="cpp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div><div class="line number183 index182 alt2"><code class="cpp plain">}</code></div></div></td></tr></tbody></table></div></div>
<pre>Following are the edges in the constructed MST
2 -- 3 == 4
0 -- 3 == 5
0 -- 1 == 10</pre>
<p><strong>Time Complexity:</strong> O(ElogE) or O(ElogV).  Sorting of edges takes O(ELogE) time. After sorting, we iterate through all edges and apply find-union algorithm.  The find and union operations can take atmost O(LogV) time.  So overall complexity is O(ELogE + ELogV) time.  The value of E can be atmost V^2, so O(LogV) are O(LogE) same. Therefore, overall time complexity is O(ElogE) or O(ElogV)</p>
<p>References:<br>
<a href="http://www.ics.uci.edu/~eppstein/161/960206.html">http://www.ics.uci.edu/~eppstein/161/960206.html</a><br>
<a href="http://en.wikipedia.org/wiki/Minimum_spanning_tree">http://en.wikipedia.org/wiki/Minimum_spanning_tree</a></p>
<p>This article is compiled by <a href="https://www.facebook.com/barnwal.aashish">Aashish Barnwal</a> and reviewed by GeeksforGeeks team. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.</p>
		
 <span class="martiniboy_social_list">
<ul class="jamie_social martinileft">
  <li class="martinifb"><fb:like send="false" layout="button_count" href="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/" show_faces="false" width="90" fb-xfbml-state="rendered" class="fb_edge_widget_with_comment fb_iframe_widget"><span style="height: 17px; width: 74px;"><iframe id="fc171753" name="f51785a8c" scrolling="no" style="border: none; overflow: hidden; height: 17px; width: 74px;" title="Like this content on Facebook." class="fb_ltr" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/like.htm"></iframe></span></fb:like>   </li>


    <!--[if !lte IE 7]><!-->
  <li>
    <div style="height: 20px; width: 90px; display: inline-block; text-indent: 0px; margin: 0px; padding: 0px; background-color: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; background-position: initial initial; background-repeat: initial initial;" id="___plusone_0"><iframe frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" tabindex="0" vspace="0" width="100%" id="I0_1360256987035" name="I0_1360256987035" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/fastbutton(1).htm" allowtransparency="true" data-gapiattached="true" title="+1"></iframe></div>
  </li>
  <!--<![endif]-->
    <li><iframe allowtransparency="true" frameborder="0" scrolling="no" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/tweet_button.1359159993.htm" class="twitter-share-button twitter-count-horizontal" style="width: 111px; height: 20px;" title="Twitter Tweet Button" data-twttr-rendered="true"></iframe></li>
    <li><span style="line-height: 1; vertical-align: baseline; display: inline-block; text-align: center;" class="IN-widget"><span style="padding: 0px !important; margin: 0px !important; text-indent: 0px !important; display: inline-block !important; vertical-align: baseline !important; font-size: 1px !important;"><span id="li_ui_li_gen_1360257136574_0"><a id="li_ui_li_gen_1360257136574_0-link" href="javascript:void(0);"><span id="li_ui_li_gen_1360257136574_0-logo">in</span><span id="li_ui_li_gen_1360257136574_0-title"><span id="li_ui_li_gen_1360257136574_0-mark"></span><span id="li_ui_li_gen_1360257136574_0-title-text">Share</span></span></a></span></span><span style="padding: 0px !important; margin: 0px !important; text-indent: 0px !important; display: inline-block !important; vertical-align: baseline !important; font-size: 1px !important;"><span id="li_ui_li_gen_1360257136591_1-container" class="IN-right IN-hidden"><span id="li_ui_li_gen_1360257136591_1" class="IN-right"><span id="li_ui_li_gen_1360257136591_1-inner" class="IN-right"><span id="li_ui_li_gen_1360257136591_1-content" class="IN-right">0</span></span></span></span></span></span><script type="in/share+init" data-url="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/" data-counter="right" data-onsuccess="LinkedInShare"></script></li>
  </ul>
<br class="jamie_clear">
</span>
 
<script type="text/javascript"><!--
google_ad_client = "ca-pub-9465609616171866";
/* Big Rectangle Blog Bottom */
google_ad_slot = "4061219431";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px"><ins id="aswift_0_anchor" style="display:block;border:none;height:280px;margin:0;padding:0;position:relative;visibility:visible;width:336px"><iframe width="336" height="280" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;"></iframe></ins></ins>     			

<div class="yarpp-related">
<b>You may also like following posts</b><ol>
<li><a href="http://www.geeksforgeeks.org/union-find/" rel="bookmark" title="Union-Find Algorithm | Set 1 (Detect Cycle in a Graph)">Union-Find Algorithm | Set 1 (Detect Cycle in a Graph)</a></li>
<li><a href="http://www.geeksforgeeks.org/union-find-algorithm-set-2-union-by-rank/" rel="bookmark" title="Union-Find Algorithm | Set 2 (Union By Rank and Path Compression)">Union-Find Algorithm | Set 2 (Union By Rank and Path Compression)</a></li>
<li><a href="http://www.geeksforgeeks.org/applications-of-minimum-spanning-tree/" rel="bookmark" title="Applications of Minimum Spanning Tree Problem">Applications of Minimum Spanning Tree Problem</a></li>
<li><a href="http://www.geeksforgeeks.org/g-fact-83/" rel="bookmark" title="Boruvka’s algorithm for Minimum Spanning Tree">Boruvka’s algorithm for Minimum Spanning Tree</a></li>
<li><a href="http://www.geeksforgeeks.org/data-structures-and-algorithms-set-8/" rel="bookmark" title="Data Structures and Algorithms | Set 8">Data Structures and Algorithms | Set 8</a></li>
</ol>
</div>
				</div>		  

<!-- Facebook Comments for WordPress: http://3doordigital.com/wordpress/plugins/facebook-comments/ --><h3>Facebook Comments</h3><p><fb:comments-count href="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/" fb-xfbml-state="rendered" class=" fb_comments_count_zero"><span class="fb_comments_count">0</span></fb:comments-count> comments</p><div class="fb-comments fb_iframe_widget" data-href="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/" data-num-posts="5" data-width="450" data-colorscheme="light" fb-xfbml-state="rendered"><span style="height: 160px; width: 450px;"><iframe id="f29ad5c664" name="f28cb247c4" scrolling="no" style="border: none; overflow: hidden; height: 160px; width: 450px;" class="fb_ltr" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/comments.htm"></iframe></span></div>	
				  <!--
				  <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
			xmlns:dc="http://purl.org/dc/elements/1.1/"
			xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
		<rdf:Description rdf:about="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/"
    dc:identifier="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/"
    dc:title="Greedy Algorithms | Set 2 (Kruskal’s Minimum Spanning Tree Algorithm)"
    trackback:ping="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/trackback/" />
</rdf:RDF>				  -->           

			</div> <!-- end post main -->
					
			<div class="post-meta">
				<div class="left"></div>				
				<div class="clear"></div>
			</div>				

					
			
        
			 

			<div class="comments-main">			                     
					  <div class="comments" id="commentsdiv">
	  	<div id="commentsholder">
		                          
			<div class="list" id="comments">
				<h3 id="commentCount">1 comment so far</h3>
  
				<ol class="commentlist" id="commentlist">                            
							<li class="comment even thread-even depth-1" id="comment-12121">
				<div id="div-comment-12121" class="comment-body">
				<div class="comment-author vcard">
		<img alt="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/2720a3645e7b9e11cc334067fb4728b3" class="avatar avatar-32 photo" height="32" width="32">		<cite class="fn">cryingFish</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/#comment-12121">
			October 31, 2012 at 9:46 AM</a>		</div>

		<p>please write about Prim and Dijekstra also</p>

		<div class="reply">
		<a class="comment-reply-link" href="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/?replytocom=12121#respond" onclick="return addComment.moveForm(&quot;div-comment-12121&quot;, &quot;12121&quot;, &quot;respond&quot;, &quot;26604&quot;)">Reply</a>		</div>
				</div>
		</li>
				</ol>						
				
				<span class="left"></span>
				<span class="right"></span>
				<div class="clear"></div>
			</div>
				</div>
		
				
		<div class="form" id="respond">

			<h3 class="respond">Comment</h3>
			<div id="cancel-comment-reply"><a rel="nofollow" id="cancel-comment-reply-link" href="http://www.geeksforgeeks.org/greedy-algorithms-set-2-kruskals-minimum-spanning-tree-mst/#respond" style="display:none;">Click here to cancel reply.</a></div>

			
		    <form action="http://www.geeksforgeeks.org/wp-comments-post.php" method="post" id="commentform">
				
									
					<div>
						<label for="author">Name (<em>Required</em>)</label>	
						<input type="text" name="author" id="author" tabindex="1" value="">			
				
						<label for="email">Email (<em>Required</em>)</label> 
						<input type="text" name="email" id="email" tabindex="2" value="">
	
						<label for="url">Website URI</label>
						<input type="text" name="url" id="url" tabindex="3" value="">
		<label for="comment"> <b>Your Comment (Writing code? please paste your code between sourcecode tags)</b></label>
						<textarea id="comment" name="comment" tabindex="4" rows="10" cols="50">


[sourcecode language="C"]
/* Paste your code here (You may delete these lines if not writing code) */
[/sourcecode]</textarea>
					</div>

				
				<div class="clear"></div>

			<!-- BEGIN: subscribe to comments reloaded --><p><label for="subscribe-reloaded"><input style="width:30px" type="checkbox" name="subscribe-reloaded" id="subscribe-reloaded" value="yes" checked="checked"> Notify me of followup comments via e-mail. You can also <a href="http://www.geeksforgeeks.org/comment-subscriptions?srp=26604&sra=s">subscribe</a> without commenting.</label></p><!-- END: subscribe to comments reloaded -->				<div class="submit">
					<div><input name="submit" type="submit" id="submit" tabindex="5" value="Have Your Say"></div>
					<div><input type="hidden" name="comment_post_ID" value="26604" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</div>
				</div>

				<div class="ajax">
					<div id="postStatus"></div>				
					<div id="commentStatus"></div>				
				<!--<div><input type="hidden" name="comment_post_ID" value="" /></div>-->
				</div>

				<div class="clear"></div>
				<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="c25d2d2d37"></p>
			<input type="hidden" name="bb2_screener_" value="1359775887 122.172.13.12"></form>

		</div> <!-- end form -->
		
				    	  </div> <!-- end comments -->			</div>
	
					
			
			

		</div> <!-- end post -->	

<br><br>
	
				

</div> <!-- end content -->

<ul id="sidebar">
	<li id="text-19" class="widget widget_text">			<div class="textwidget"><div id="cse" style="width: 100%;"><div class="gsc-control-cse gsc-control-cse-en"><div class="gsc-control-wrapper-cse" dir="ltr"><form class="gsc-search-box" accept-charset="utf-8"><table cellspacing="0" cellpadding="0" class="gsc-search-box"><tbody><tr><td class="gsc-input"><input autocomplete="off" type="text" size="10" class=" gsc-input" name="search" title="search" id="gsc-i-id1" dir="ltr" spellcheck="false" style="outline: none; background-image: url(http://www.google.com/cse/intl/en/images/google_custom_search_watermark.gif); background-color: rgb(255, 255, 255); background-position: 0% 50%; background-repeat: no-repeat no-repeat;"></td><td class="gsc-search-button"><input type="button" value="Search" class="gsc-search-button" title="search"></td><td class="gsc-clear-button"><div class="gsc-clear-button" title="clear results">&nbsp;</div></td></tr></tbody></table><table cellspacing="0" cellpadding="0" class="gsc-branding"><tbody><tr><td class="gsc-branding-user-defined"></td><td class="gsc-branding-text"><div class="gsc-branding-text">powered by</div></td><td class="gsc-branding-img"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/small-logo.png" class="gsc-branding-img"></td></tr></tbody></table></form><div class="gsc-results-wrapper-nooverlay"><div class="gsc-tabsAreaInvisible"><div class="gsc-tabHeader gsc-inline-block gsc-tabhActive">Custom Search</div><span class="gs-spacer"> </span></div><div class="gsc-tabsAreaInvisible"></div><div class="gsc-above-wrapper-area-invisible"><table cellspacing="0" cellpadding="0" class="gsc-above-wrapper-area-container"><tbody><tr><td class="gsc-result-info-container"><div class="gsc-result-info-invisible"></div></td></tr></tbody></table></div><div class="gsc-adBlockInvisible"></div><div class="gsc-wrapper"><div class="gsc-adBlockInvisible"></div><div class="gsc-resultsbox-invisible"><div class="gsc-resultsRoot gsc-tabData gsc-tabdActive"><table cellspacing="0" cellpadding="0" class="gsc-resultsHeader"><tbody><tr><td class="gsc-twiddleRegionCell"><div class="gsc-twiddle"><div class="gsc-title">Web</div></div><div class="gsc-stats"></div><div class="gsc-results-selector gsc-all-results-active"><div class="gsc-result-selector gsc-one-result" title="show one result">&nbsp;</div><div class="gsc-result-selector gsc-more-results" title="show more results">&nbsp;</div><div class="gsc-result-selector gsc-all-results" title="show all results">&nbsp;</div></div></td><td class="gsc-configLabelCell"></td></tr></tbody></table><div><div class="gsc-expansionArea"></div></div></div></div></div></div></div></div></div>
<script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/jsapi" type="text/javascript"></script>
<script type="text/javascript">
  google.load('search', '1', {language : 'en', style : google.loader.themes.GREENSKY});
  google.setOnLoadCallback(function() {
    var customSearchControl = new google.search.CustomSearchControl('010463773075615557214:qy5dkn-osd8');
    customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);
    customSearchControl.draw('cse');
  }, true);
</script><script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/saved_resource(1)" type="text/javascript"></script><link href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/default+en.css" type="text/css" rel="stylesheet"><link href="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/greensky.css" type="text/css" rel="stylesheet"><script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/default+en.I.js" type="text/javascript"></script>

<style type="text/css">
  .gsc-control-cse {
    font-family: "Trebuchet MS", sans-serif;
    border-color: #E1F3DA;
    background-color: #E1F3DA;
  }
  input.gsc-input {
    border-color: #94CC7A;
  }
  input.gsc-search-button {
    border-color: #94CC7A;
    background-color: #AADA92;
  }
  .gsc-tabHeader.gsc-tabhInactive {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-tabHeader.gsc-tabhActive {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gsc-tabsArea {
    border-color: #A9DA92;
  }
  .gsc-webResult.gsc-result {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-webResult.gsc-result:hover {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gs-webResult.gs-result a.gs-title:link,
  .gs-webResult.gs-result a.gs-title:link b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:visited,
  .gs-webResult.gs-result a.gs-title:visited b {
    color: #009900;
  }
  .gs-webResult.gs-result a.gs-title:hover,
  .gs-webResult.gs-result a.gs-title:hover b {
    color: #003300;
  }
  .gs-webResult.gs-result a.gs-title:active,
  .gs-webResult.gs-result a.gs-title:active b {
    color: #009900;
  }
  .gsc-cursor-page {
    color: #009900;
  }
  a.gsc-trailing-more-results:link {
    color: #009900;
  }
  .gs-webResult.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-webResult.gs-result .gs-visibleUrl {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    color: #33cc00;
  }
  .gs-webResult.gs-result .gs-visibleUrl-short {
    display: none;
  }
  .gs-webResult.gs-result .gs-visibleUrl-long {
    display: block;
  }
  .gsc-cursor-box {
    border-color: #A9DA92;
  }
  .gsc-results .gsc-cursor-page {
    border-color: #A9DA92;
    background-color: #FFFFFF;
  }
  .gsc-results .gsc-cursor-page.gsc-cursor-current-page {
    border-color: #A9DA92;
    background-color: #A9DA92;
  }
  .gs-promotion.gs-result {
    border-color: #94CC7A;
    background-color: #CBE8B4;
  }
  .gs-promotion.gs-result a.gs-title:link {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:visited {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:hover {
    color: #0066CC;
  }
  .gs-promotion.gs-result a.gs-title:active {
    color: #0066CC;
  }
  .gs-promotion.gs-result .gs-snippet {
    color: #454545;
  }
  .gs-promotion.gs-result .gs-visibleUrl,
  .gs-promotion.gs-result .gs-visibleUrl-short {
    color: #815FA7;
  }
</style>    

</div>
		</li>
<li id="text-13" class="widget widget_text">			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/tag/interview-experience">Interview Experiences</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/advance-data-structures">Advanced Data Structures</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/dynamic-programming">Dynamic Programming</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Greedy-Algorithm/">Geedy Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/backtracking">Backtracking</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/pattern-searching">Pattern Searching</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/divide-and-conquer">Divide &amp; Conquer</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/graph">Graph</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/MathematicalAlgo">Mathematical Algorithms</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/recursion">Recursion</a></li>
<li><a href="http://www.geeksforgeeks.org/tag/Java">Java</a></li>
</ul>
</div>
		</li>
<li id="text-9" class="widget widget_text">			<div class="textwidget"><iframe src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/likebox.htm" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:240px; height:200px;" allowtransparency="true"></iframe></div>
		</li>
<li id="text-18" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "ca-pub-9465609616171866";
/* Mediam Rectange */
google_ad_slot = "7922198189";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px"><ins id="aswift_1_anchor" style="display:block;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px"><iframe width="300" height="250" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;"></iframe></ins></ins></div>
		</li>
<li id="bbp_forums_widget-2" class="widget widget_display_forums"><h2 class="widgettitle">Forums</h2>

			<ul>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/interview-questions/" title="Interview Questions">Interview Questions</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/c-specific-questions/" title="C/C++ Programming Questions">C/C++ Programming Questions</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/algorithms/" title="Algorithms">Algorithms</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/trees-specific-questions/" title="Trees specific questions">Trees specific questions</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/linked-list-specific-questions/" title="Linked List specific questions">Linked List specific questions</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/multiple-choice-questions/" title="Multiple Choice Questions">Multiple Choice Questions</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/c-specific-questions-1/" title="Object oriented queries">Object oriented queries</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/gpuzzles/" title="GPuzzles">GPuzzles</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/operating-systems/" title="Operating Systems">Operating Systems</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/miscellaneous/" title="Miscellaneous">Miscellaneous</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/java-specific-questions/" title="Java specific Questions">Java specific Questions</a></li>

				
					<li><a class="bbp-forum-title" href="http://www.geeksforgeeks.org/forums/forum/perl-specific-questions/" title="Perl specific Questions">Perl specific Questions</a></li>

				
			</ul>

			</li>
<li id="bbp_replies_widget-2" class="widget widget_display_replies"><h2 class="widgettitle">Recent Forum Discussion</h2>

			<ul>

				
					<li>

						<a href="http://www.geeksforgeeks.org/forums/user/knaveenkumar/" title="View knaveenkumar&#39;s profile" class="bbp-author-avatar" rel="nofollow"><img alt="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/e3479c49f7c0ed826d43f37a61d690eb" class="avatar avatar-14 photo" height="14" width="14"></a>&nbsp;<a href="http://www.geeksforgeeks.org/forums/user/knaveenkumar/" title="View knaveenkumar&#39;s profile" class="bbp-author-name" rel="nofollow">knaveenkumar</a> on <a class="bbp-reply-topic-title" href="http://www.geeksforgeeks.org/forums/topic/gate-2007-question-about-probability/#post-114133" title="Sorry above 1 small mistake I have done.,
Its not…">GATE 2007 question about Probability</a>
					</li>

				
					<li>

						<a href="http://www.geeksforgeeks.org/forums/user/knaveenkumar/" title="View knaveenkumar&#39;s profile" class="bbp-author-avatar" rel="nofollow"><img alt="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/e3479c49f7c0ed826d43f37a61d690eb" class="avatar avatar-14 photo" height="14" width="14"></a>&nbsp;<a href="http://www.geeksforgeeks.org/forums/user/knaveenkumar/" title="View knaveenkumar&#39;s profile" class="bbp-author-name" rel="nofollow">knaveenkumar</a> on <a class="bbp-reply-topic-title" href="http://www.geeksforgeeks.org/forums/topic/gate-2007-question-about-probability/#post-114132" title="Dear Friens,
I saw all the answers above, I think…">GATE 2007 question about Probability</a>
					</li>

				
					<li>

						<a href="http://www.geeksforgeeks.org/forums/user/wiseguy/" title="View wiseguy&#39;s profile" class="bbp-author-avatar" rel="nofollow"><img alt="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/9b65b7f815351e30ac1047f73978e8e5" class="avatar avatar-14 photo" height="14" width="14"></a>&nbsp;<a href="http://www.geeksforgeeks.org/forums/user/wiseguy/" title="View wiseguy&#39;s profile" class="bbp-author-name" rel="nofollow">wiseguy</a> on <a class="bbp-reply-topic-title" href="http://www.geeksforgeeks.org/forums/topic/finding-kth-minimum-element-in-2-d-sorted-array-2/#post-114113" title="Think of every row [or column if you so prefer] a…">finding 'k'th minimum element in 2-D sorted array</a>
					</li>

				
					<li>

						<a href="http://www.geeksforgeeks.org/forums/user/kimsh/" title="View kimsh&#39;s profile" class="bbp-author-avatar" rel="nofollow"><img alt="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/ada3dc61e7d13ee3ae961c1b1c77c487" class="avatar avatar-14 photo" height="14" width="14"></a>&nbsp;<a href="http://www.geeksforgeeks.org/forums/user/kimsh/" title="View kimsh&#39;s profile" class="bbp-author-name" rel="nofollow">kimsh</a> on <a class="bbp-reply-topic-title" href="http://www.geeksforgeeks.org/forums/topic/microsoft-interview-question-about-algorithms-arrays-4/#post-114103" title="Time complexity=o(n)
Space complexity=o(1)
 ">Microsoft Interview Question about Algorithms, Arrays</a>
					</li>

				
					<li>

						<a href="http://www.geeksforgeeks.org/forums/user/kimsh/" title="View kimsh&#39;s profile" class="bbp-author-avatar" rel="nofollow"><img alt="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/ada3dc61e7d13ee3ae961c1b1c77c487" class="avatar avatar-14 photo" height="14" width="14"></a>&nbsp;<a href="http://www.geeksforgeeks.org/forums/user/kimsh/" title="View kimsh&#39;s profile" class="bbp-author-name" rel="nofollow">kimsh</a> on <a class="bbp-reply-topic-title" href="http://www.geeksforgeeks.org/forums/topic/microsoft-interview-question-about-algorithms-arrays-4/#post-114102" title="void remDup(int *arr,int size)
{int j,i=0;
int k=…">Microsoft Interview Question about Algorithms, Arrays</a>
					</li>

				
					<li>

						<a href="http://www.geeksforgeeks.org/forums/user/vaibhav_rocks18/" title="View vaibhav_rocks18&#39;s profile" class="bbp-author-avatar" rel="nofollow"><img alt="" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/99305014a3ba37458b4d3531c2672712" class="avatar avatar-14 photo" height="14" width="14"></a>&nbsp;<a href="http://www.geeksforgeeks.org/forums/user/vaibhav_rocks18/" title="View vaibhav_rocks18&#39;s profile" class="bbp-author-name" rel="nofollow">vaibhav_rocks18</a> on <a class="bbp-reply-topic-title" href="http://www.geeksforgeeks.org/forums/topic/directi-coding-round-2/#post-114099" title="Yes , i think it is right">Directi Coding Round 2</a>
					</li>

				
			</ul>

			</li>
<li id="text-14" class="widget widget_text"><h2 class="widgettitle">Popular Posts</h2>
			<div class="textwidget"><ul>
<li><a href="http://www.geeksforgeeks.org/archives/767">  All permutations of a given string </a></li>
<li><a href="http://www.geeksforgeeks.org/archives/14268"> Memory Layout of C Programs</a> </li>
<li><a href="http://www.geeksforgeeks.org/archives/840"> Understanding “extern” keyword in C</a> </li>
<li><a href="http://www.geeksforgeeks.org/archives/2105">Median of two sorted arrays</a> </li>
<li><a href="http://www.geeksforgeeks.org/archives/6358"> Tree traversal without recursion and without stack! </a></li>
<li><a href="http://www.geeksforgeeks.org/archives/9705"> Structure Member Alignment, Padding and Data Packing</a> </li>
<li><a href="http://www.geeksforgeeks.org/archives/2405"> Intersection point of two Linked Lists</a> </li>
<li><a href="http://www.geeksforgeeks.org/archives/1029"> Lowest Common Ancestor in a BST.</a> </li>
<li><a href="http://www.geeksforgeeks.org/archives/3042"> Check if a binary tree is BST or not</a> </li>
<li><a href="http://www.geeksforgeeks.org/archives/17063"> Sorted Linked List to Balanced BST</a></li>
</ul></div>
		</li>
<li id="text-17" class="widget widget_text">			<div class="textwidget"><script type="text/javascript"><!--
google_ad_client = "ca-pub-9465609616171866";
/* Wide Skyscrapper Sidebar */
google_ad_slot = "8695472116";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/show_ads.js">
</script><ins style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><ins id="aswift_2_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:160px"><iframe width="160" height="600" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;"></iframe></ins></ins></div>
		</li>
<li id="text-3" class="widget widget_text">			<div class="textwidget"><!-- TWITTER BUTTON-->
<iframe allowtransparency="true" frameborder="0" scrolling="no" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/follow_button.1359159993.htm" class="twitter-follow-button twitter-follow-button" style="width: 263px; height: 20px;" title="Twitter Follow Button" data-twttr-rendered="true"></iframe>
<script src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/widgets.js" type="text/javascript"></script>

         <!-- Place this tag in your head or just before your close body tag -->
         <script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/plusone.js" gapi_processed="true"></script>
         <!-- Place this tag where you want the +1 button to render -->
         <div style="height: 24px; width: 106px; display: inline-block; text-indent: 0px; margin: 0px; padding: 0px; background-color: transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; background-position: initial initial; background-repeat: initial initial;" id="___plusone_1"><iframe frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: static; top: 0px; width: 106px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 24px;" tabindex="0" vspace="0" width="100%" id="I0_1360256987124" name="I0_1360256987124" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/fastbutton.htm" allowtransparency="true" data-gapiattached="true" title="+1"></iframe></div>

<!-- GOOGLE FEEDBURNER BUTTON-->
<a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml"><img src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/feed-icon32x32.png" alt="" style="border:0"></a><a href="http://feeds.feedburner.com/Geeksforgeeks" title="Subscribe to my feed" rel="alternate" type="application/rss+xml">Subscribe</a>

</div>
		</li>
<li id="recent-comments-2" class="widget widget_recent_comments"><h2 class="widgettitle">Recent Comments</h2>
<ul id="recentcomments"><li class="recentcomments">VikasG on <a href="http://www.geeksforgeeks.org/lexicographic-permutations-of-string/#comment-14962">Print all permutations in sorted (lexicographic) order</a></li><li class="recentcomments">Rahul on <a href="http://www.geeksforgeeks.org/iterative-quick-sort/#comment-14961">Iterative Quick Sort</a></li><li class="recentcomments">AlexC on <a href="http://www.geeksforgeeks.org/amazon-interview-set-19/#comment-14960">Amazon Interview | Set 19</a></li><li class="recentcomments">AlexC on <a href="http://www.geeksforgeeks.org/amazon-interview-set-19/#comment-14959">Amazon Interview | Set 19</a></li><li class="recentcomments">mrn on <a href="http://www.geeksforgeeks.org/find-the-maximum-element-in-an-array-which-is-first-increasing-and-then-decreasing/#comment-14958">Find the maximum element in an array which is first increasing and then decreasing</a></li><li class="recentcomments">coderAce on <a href="http://www.geeksforgeeks.org/maximum-sum-such-that-no-two-elements-are-adjacent/#comment-14957">Maximum sum such that no two elements are adjacent</a></li><li class="recentcomments">coderAce on <a href="http://www.geeksforgeeks.org/maximum-product-subarray/#comment-14955">Maximum Product Subarray</a></li><li class="recentcomments">coderAce on <a href="http://www.geeksforgeeks.org/maximum-product-subarray/#comment-14954">Maximum Product Subarray</a></li></ul></li>

</ul>	
				  
		<div class="clear"></div>

		<div id="footer">
		
		    <div class="xhtml">
                        @geeksforgeeks, <a href="http://creativecommons.org/licenses/by-nc-nd/2.5/in/deed.en_US" title="Valid XHTML Strict 1.0">Some rights reserved</a>  <a href="http://www.geeksforgeeks.org/about/contact-us/"> &nbsp; &nbsp; &nbsp; &nbsp;Contact Us</a>

		    </div>
		    
		    <div class="credits">
			  Powered by <a href="http://wordpress.org/">WordPress </a> &amp; <a href="http://mootools.net/" title="Mootools JavaScript Framework">MooTools</a>, customized by geeksforgeeks team </div>
			  
		   <div class="clear"></div>						                            
		   
		</div> <!--end footer-->  
        
		<!--[if !lte IE 8]><!--> 
<!--<![endif]--> 
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/shCore.js"></script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/shBrushCpp.js"></script>
<script type="text/javascript">
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://www.geeksforgeeks.org/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.83c";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://www.geeksforgeeks.org/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.83c";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['gutter'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = true;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/social.js"></script>
<script type="text/javascript" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/in.js"></script>
<!-- Facebook Comments for WordPress: http://3doordigital.com/wordpress/plugins/facebook-comments/ -->
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=308017392649785";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
				  
		</div><div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_http" frameborder="0" allowtransparency="true" scrolling="no" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tab-index="-1" style="border: none;" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/xd_arbiter.htm"></iframe><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" scrolling="no" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tab-index="-1" style="border: none;" src="./Greedy Algorithms   Set 2 (Kruskal’s Minimum Spanning Tree Algorithm) - GeeksforGeeks   GeeksforGeeks_files/xd_arbiter(1).htm"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div></div></div></div> <!--end wrapper-->
        
        <div id="ajaxSpinner"></div> <!--For AJAX spinner holder-->
	

<!-- Dynamic page generated in 0.320 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2013-02-02 09:01:28 -->

<!-- super cache --><table cellspacing="0" cellpadding="0" style="width: 218px; display: none; top: 175px; left: 946px; position: absolute;" class="gstl_0 gssb_c"><tbody><tr><td class="gssb_f"></td><td class="gssb_e" style="width: 100%;"></td></tr></tbody></table></body></html>